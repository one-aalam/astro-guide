---
import { type RadialProgressProps } from './types';
import { defaultOptions } from './config'
import { styleTransform, strokeDasharray, strokeLinecap } from './utils'

type Props = RadialProgressProps;

const className = 'astro-rp';

function getCircleAttrs(options, where = "bottom") {
    let configCircle = {};
    if (options.cut) {
        const dashoffset = 264 - (100 - options.cut) * 2.64;
        configCircle = {
            "stroke-dashoffset": options.inverse ? -dashoffset : dashoffset,
            style: styleTransform(options),
            ...strokeDasharray(),
            ...strokeLinecap(options),
        };
    }

    const objCircle = {
        fill: options.fill,
        stroke: options.colorCircle,
        "stroke-width": options.strokeBottom || options.stroke,
        ...configCircle,
    };

    if (options.strokeDasharray) {
        Object.assign(objCircle, { ...strokeDasharray(options.strokeDasharray) });
    }

    const typeCircle =
        where === "top"
            ? { class: `${className}-circle-progress` }
            : objCircle;

    const objConfig = {
        cx: "50%",
        cy: "50%",
        r: 42,
        "shape-rendering": "geometricPrecision",
        ...typeCircle,
    };

    return objConfig
}


---
<astro-rp data-options={JSON.stringify({ ...defaultOptions, ...Astro.props })}>
    <svg 
        xmlns="http://www.w3.org/2000/svg"
        role="progressbar"
        width={Astro.props.size ||defaultOptions.size} height={Astro.props.size ||defaultOptions.size}
        fill="none" viewBox="0 0 100 100" stroke="currentColor"
        class="relatve rounded-full shadow-inner shadow-gray-300"
        aria-valuemin="0" aria-valuemax="100">
        {
            Astro.props.colorCircle && <circle data-angle="20" {...getCircleAttrs(defaultOptions)} />
        }
        <!-- {
            Astro.props.linearGradient && <linearGradient
        } -->
        <circle {...getCircleAttrs(defaultOptions, "top")} />
    </svg>
</astro-rp>
<script>
    import { type RadialProgressProps } from './types';
    import { styleTransform, strokeDasharray, strokeLinecap, percent, insertAdElement, setAttribute, setColor, dashOffset, gradient } from './utils'
    import { defaultOptions } from './config'
    

    function animationTo(options, circleElement, initial = false) {
        const previousConfigObj = JSON.parse('{}'
            // querySelector(`[data-pie-index="${options.index}"]`).getAttribute(
            //     "data-pie"
            // )
        );

        if (!circleElement) return;

        // merging all configuration objects
        const commonConfiguration = initial
            ? options
            : {
                ...defaultOptions,
                ...previousConfigObj,
                ...options,
                ...this._globalObj,
            };

        // update color circle
        if (!initial) {
            setColor(circleElement, commonConfiguration);
        }

        // font color update
        // if (!initial && commonConfiguration.number) {
        //     const fontconfig = {
        //         fill: commonConfiguration.fontColor,
        //         ...fontSettings(commonConfiguration),
        //     };
        //     const textElement = querySelector(
        //         `.${pieName}-text-${commonConfiguration.index}`
        //     );
        //     setAttribute(textElement, fontconfig);
        // }

        // const centerNumber = querySelector(`.${pieName}-percent-${options.index}`);

        // if (commonConfiguration.animationOff) {
        //     if (commonConfiguration.number)
        //         centerNumber.textContent = `${commonConfiguration.percent}`;
        //     circleElement.setAttribute(
        //         "stroke-dashoffset",
        //         dashOffset(commonConfiguration.percent, commonConfiguration.inverse)
        //     );
        //     return;
        // }

        // get numer percent from data-angel
        let angle = JSON.parse(circleElement.getAttribute("data-angel"));

        // round if number is decimal
        const percent = Math.round(options.percent);

        // if percent 0 then set at start 0%
        if (percent === 0) {
            // if (commonConfiguration.number) centerNumber.textContent = "0";
            circleElement.setAttribute("stroke-dashoffset", "264");
        }

        if (percent > 100 || percent < 0 || angle === percent) return;

        let request;
        let i = initial ? 0 : angle;

        const fps = commonConfiguration.speed || 1000;
        const interval = 1000 / fps;
        const tolerance = 0.1;
        let then = performance.now();

        const performAnimation = (now) => {
            request = requestAnimationFrame(performAnimation);
            const delta = now - then;

            if (delta >= interval - tolerance) {
                then = now - (delta % interval);

                angle >= commonConfiguration.percent ? i-- : i++;
            }

            circleElement.setAttribute(
                "stroke-dashoffset",
                dashOffset(i, commonConfiguration.inverse, commonConfiguration.cut)
            );
            // if (centerNumber && commonConfiguration.number) {
            //     centerNumber.textContent = `${i}`;
            // }

            circleElement.setAttribute("data-angel", i);
            circleElement.parentNode.setAttribute("aria-valuenow", i);

            if (i === percent) {
                cancelAnimationFrame(request);
            }
        };

        requestAnimationFrame(performAnimation);
    }


    function _progress(svg, target, options, progressCircle) {
        if (options.number) {
            insertAdElement(svg, percent(options, 'astro-rp'));
        }

        const configCircle = {
            fill: "none",
            "stroke-width": options.stroke,
            "stroke-dashoffset": "264",
            ...strokeDasharray(),
            ...strokeLinecap(options),
        };
        setAttribute(progressCircle, configCircle);
        // animation progress
        animationTo(options, progressCircle, true);

        // set style and rotation
        progressCircle.setAttribute("style", styleTransform(options));

        // set color
        setColor(progressCircle, options);

        // set width and height on div
        target.setAttribute(
            "style",
            `width:${options.size}px;height:${options.size}px;`
        );
    }

    class AstroRadialProgress extends HTMLElement {
        static className = 'astro-rp';
        constructor() {
            super();
            const self = this;
            let options: RadialProgressProps = {};
            try {
                options = JSON.parse(self.dataset.options || '{}');
            } catch {}
            console.log(options)
            const radialProgressElm = self.querySelector(`svg`)
            const progressCircleElm = self.querySelector(`.astro-rp-circle-progress`)

            if(radialProgressElm && options.lineargradient) {
                radialProgressElm.appendChild(gradient(options.lineargradient));
            }
            _progress(radialProgressElm, self, options, progressCircleElm);
        }
    }
    customElements.define("astro-rp", AstroRadialProgress);
</script>